// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction.
 * 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
    1  1  1  a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[15], b=true, out=CInstruction);
    Not(in=CInstruction,out=AInstruction);
    
    Mux16(a=instruction, b=ALUout, sel=CInstruction, out=Ain);
    Or(a=AInstruction,b=instruction[5],out=loadA);//d1
    ARegister(in=Ain, load=loadA, out=Aout, out[0..14]=addressM);
    
    And(a=CInstruction, b=instruction[4], out=dLoad);
    DRegister(in=ALUout, load=dLoad, out=Dout);

    And(a=CInstruction, b=instruction[12], out=M);
    Mux16(a=Aout, b=inM, sel=M, out=AOrM);
    And(a=CInstruction, b=instruction[11], out=zx);     //c1
    And(a=CInstruction, b=instruction[10], out=nx);     //c2
    Or(a=AInstruction, b=instruction[9], out=zy);       //c3
    Or(a=AInstruction, b=instruction[8], out=ny);       //c4
    And(a=CInstruction, b=instruction[7], out=f);       //c5
    And(a=CInstruction, b=instruction[6], out=no);      //c6
    ALU(x=Dout, y=AOrM, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=ALUout, out=outM, zr=zr, ng=ng);

    And(a=CInstruction, b=instruction[3], out=writeM);

    Or(a=zr, b=ng, out=nPos);
    Not(in=nPos, out=Pos);
    And(a=ng, b=instruction[2], out=j2);
    And(a=zr, b=instruction[1], out=j1);
    And(a=Pos, b=instruction[0], out=j0);
    Or(a=j2, b=j1, out=j21);
    Or(a=j21, b=j0, out=j210);
    And(a=CInstruction, b=j210, out=jump);
    PC(in=Aout, load=jump, inc=true, reset=reset, out[0..14]=pc);
}